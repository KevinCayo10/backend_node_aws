openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
servers:
  - url: http://localhost:3002/api/v1
paths:
  /products:
    get:
      summary: List products
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: cursor
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
    post:
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sku, name, priceCents, stock]
              properties:
                sku: { type: string }
                name: { type: string }
                priceCents: { type: integer }
                stock: { type: integer }
      responses:
        '201': { description: Created }
  /products/{id}:
    get:
      summary: Get product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
    put:
      summary: Update product
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sku: { type: string }
                name: { type: string }
                priceCents: { type: integer }
                stock: { type: integer }
      responses:
        '200': { description: Updated }
  /orders:
    get:
      summary: List orders
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [CREATED, CONFIRMED, CANCELED] }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: cursor
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
    post:
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [customerId, items]
              properties:
                customerId: { type: integer }
                items:
                  type: array
                  items:
                    type: object
                    required: [productId, qty]
                    properties:
                      productId: { type: integer }
                      qty: { type: integer, minimum: 1 }
      responses:
        '201': { description: Created }
  /orders/{id}:
    get:
      summary: Get order by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /orders/{id}/confirm:
    post:
      summary: Confirm order (idempotent)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: header
          name: X-Idempotency-Key
          required: true
          schema: { type: string }
      responses:
        '200': { description: Confirmed }
  /orders/{id}/cancel:
    post:
      summary: Cancel order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Canceled }

